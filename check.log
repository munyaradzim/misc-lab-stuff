
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+3855 (git sha1 54294957, clang 7.0.1 -fPIC -Os)


-- Parsing `lc4_alu.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: lc4_alu.v
Parsing Verilog input from `lc4_alu.v' to AST representation.
Lexer warning: The SystemVerilog keyword `logic' (at lc4_alu.v:14) is not recognized unless read_verilog is called with -sv!
Lexer warning: The SystemVerilog keyword `const' (at lc4_alu.v:14) is not recognized unless read_verilog is called with -sv!
Lexer warning: The SystemVerilog keyword `const' (at lc4_alu.v:20) is not recognized unless read_verilog is called with -sv!
Lexer warning: The SystemVerilog keyword `logic' (at lc4_alu.v:25) is not recognized unless read_verilog is called with -sv!
Lexer warning: The SystemVerilog keyword `logic' (at lc4_alu.v:31) is not recognized unless read_verilog is called with -sv!
Lexer warning: The SystemVerilog keyword `const' (at lc4_alu.v:31) is not recognized unless read_verilog is called with -sv!
Lexer warning: The SystemVerilog keyword `const' (at lc4_alu.v:31) is not recognized unless read_verilog is called with -sv!
Lexer warning: The SystemVerilog keyword `const' (at lc4_alu.v:40) is not recognized unless read_verilog is called with -sv!
Lexer warning: The SystemVerilog keyword `const' (at lc4_alu.v:51) is not recognized unless read_verilog is called with -sv!
Generating RTLIL representation for module `\lc4_alu'.
Generating RTLIL representation for module `\alu_final'.
Generating RTLIL representation for module `\arith_mux'.
Generating RTLIL representation for module `\jsr_mux'.
Generating RTLIL representation for module `\cmp_mux'.
Generating RTLIL representation for module `\logic_mux'.
Generating RTLIL representation for module `\shift_mux'.
Generating RTLIL representation for module `\jmp_mux'.
Generating RTLIL representation for module `\hiconst_calc'.
Generating RTLIL representation for module `\cla_mux'.
Successfully finished Verilog frontend.

-- Parsing `lc4_divider.v' using frontend `verilog' --

2. Executing Verilog-2005 frontend: lc4_divider.v
Parsing Verilog input from `lc4_divider.v' to AST representation.
Generating RTLIL representation for module `\lc4_divider'.
Generating RTLIL representation for module `\lc4_divider_one_iter'.
Successfully finished Verilog frontend.

-- Parsing `lc4_cla.v' using frontend `verilog' --

3. Executing Verilog-2005 frontend: lc4_cla.v
Parsing Verilog input from `lc4_cla.v' to AST representation.
Generating RTLIL representation for module `\gp1'.
Generating RTLIL representation for module `\gp4'.
Generating RTLIL representation for module `\cla16'.
Generating RTLIL representation for module `\gpn'.
Successfully finished Verilog frontend.

-- Running command `check; hierarchy -check; flatten; check -assert' --

4. Executing CHECK pass (checking for obvious problems).
Checking module cla16...
Checking module gp4...
Checking module gp1...
Checking module lc4_divider_one_iter...
Checking module lc4_divider...
Checking module cla_mux...
Checking module hiconst_calc...
Checking module jmp_mux...
Checking module shift_mux...
Checking module logic_mux...
Checking module cmp_mux...
Checking module jsr_mux...
Checking module arith_mux...
Checking module alu_final...
Checking module lc4_alu...
Found and reported 0 problems.

5. Executing HIERARCHY pass (managing design hierarchy).
Warning: Resizing cell port cla_mux.c0.b from 1 bits to 16 bits.
Warning: Resizing cell port cla_mux.c0.a from 1 bits to 16 bits.

6. Executing FLATTEN pass (flatten design).
<suppressed ~32 debug messages>

7. Executing CHECK pass (checking for obvious problems).
Checking module cla16...
Checking module gp4...
Checking module gp1...
Checking module lc4_divider_one_iter...
Checking module lc4_divider...
Checking module cla_mux...
Checking module hiconst_calc...
Checking module jmp_mux...
Checking module shift_mux...
Checking module logic_mux...
Checking module cmp_mux...
Checking module jsr_mux...
Checking module arith_mux...
Checking module alu_final...
Checking module lc4_alu...
Found and reported 0 problems.

Warnings: 2 unique messages, 2 total
End of script. Logfile hash: 57e548d4b7, CPU: user 0.28s system 0.01s, MEM: 41.32 MB peak
Yosys 0.9+3855 (git sha1 54294957, clang 7.0.1 -fPIC -Os)
Time spent: 79% 2x check (0 sec), 17% 1x flatten (0 sec), ...
